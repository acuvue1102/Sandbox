#pragma once

#include "si_base/core/core.h"
#include "si_base/gpu/gfx_enum.h"

namespace SI
{
	inline size_t GetFormatBits(GfxFormat format)
	{
		size_t kTable[] =
		{
			0,       // kGfxFormat_Unknown,
			8 * 16,  // kGfxFormat_R32G32B32A32_Typeless,
			8 * 16,  // kGfxFormat_R32G32B32A32_Float,
			8 * 16,  // kGfxFormat_R32G32B32A32_Uint,
			8 * 16,  // kGfxFormat_R32G32B32A32_Sint,
			8 * 12,  // kGfxFormat_R32G32B32_Typeless,
			8 * 12,  // kGfxFormat_R32G32B32_Float,
			8 * 12,  // kGfxFormat_R32G32B32_Uint,
			8 * 12,  // kGfxFormat_R32G32B32_Sint,
			8 * 8,   // kGfxFormat_R16G16B16A16_Typeless,
			8 * 8,   // kGfxFormat_R16G16B16A16_Float,
			8 * 8,   // kGfxFormat_R16G16B16A16_Unorm,
			8 * 8,   // kGfxFormat_R16G16B16A16_Uint,
			8 * 8,   // kGfxFormat_R16G16B16A16_Snorm,
			8 * 8,   // kGfxFormat_R16G16B16A16_Sint,
			8 * 8,   // kGfxFormat_R32G32_Typeless,
			8 * 8,   // kGfxFormat_R32G32_Float,
			8 * 8,   // kGfxFormat_R32G32_Uint,
			8 * 8,   // kGfxFormat_R32G32_Sint,
			8 * 8,   // kGfxFormat_R32G8X24_Typeless,
			8 * 8,   // kGfxFormat_D32_Float_S8X24_Uint,
			8 * 8,   // kGfxFormat_R32_Float_X8X24_Typeless,
			8 * 8,   // kGfxFormat_X32_Typeless_G8X24_Uint,
			8 * 4,   // kGfxFormat_R10G10B10A2_Typeless,
			8 * 4,   // kGfxFormat_R10G10B10A2_Unorm,
			8 * 4,   // kGfxFormat_R10G10B10A2_Uint,
			8 * 4,   // kGfxFormat_R11G11B10_Float,
			8 * 4,   // kGfxFormat_R8G8B8A8_Typeless,
			8 * 4,   // kGfxFormat_R8G8B8A8_Unorm,
			8 * 4,   // kGfxFormat_R8G8B8A8_Unorm_SRGB,
			8 * 4,   // kGfxFormat_R8G8B8A8_Uint,
			8 * 4,   // kGfxFormat_R8G8B8A8_Snorm,
			8 * 4,   // kGfxFormat_R8G8B8A8_Sint,
			8 * 4,   // kGfxFormat_R16G16_Typeless,
			8 * 4,   // kGfxFormat_R16G16_Float,
			8 * 4,   // kGfxFormat_R16G16_Unorm,
			8 * 4,   // kGfxFormat_R16G16_Uint,
			8 * 4,   // kGfxFormat_R16G16_Snorm,
			8 * 4,   // kGfxFormat_R16G16_Sint,
			8 * 4,   // kGfxFormat_R32_Typeless,
			8 * 4,   // kGfxFormat_D32_Float,
			8 * 4,   // kGfxFormat_R32_Float,
			8 * 4,   // kGfxFormat_R32_Uint,
			8 * 4,   // kGfxFormat_R32_Sint,
			8 * 4,   // kGfxFormat_R24G8_Typeless,
			8 * 4,   // kGfxFormat_D24_Unorm_S8_Uint,
			8 * 4,   // kGfxFormat_R24_Unorm_X8_Typeless,
			8 * 4,   // kGfxFormat_X24_Typeless_G8_Uint,
			8 * 2,   // kGfxFormat_R8G8_Typeless,
			8 * 2,   // kGfxFormat_R8G8_Unorm,
			8 * 2,   // kGfxFormat_R8G8_Uint,
			8 * 2,   // kGfxFormat_R8G8_Snorm,
			8 * 2,   // kGfxFormat_R8G8_Sint,
			8 * 2,   // kGfxFormat_R16_Typeless,
			8 * 2,   // kGfxFormat_R16_Float,
			8 * 2,   // kGfxFormat_D16_Unorm,
			8 * 2,   // kGfxFormat_R16_Unorm,
			8 * 2,   // kGfxFormat_R16_Uint,
			8 * 2,   // kGfxFormat_R16_Snorm,
			8 * 2,   // kGfxFormat_R16_Sint,
			8 * 1,   // kGfxFormat_R8_Typeless,
			8 * 1,   // kGfxFormat_R8_Unorm,
			8 * 1,   // kGfxFormat_R8_Uint,
			8 * 1,   // kGfxFormat_R8_Snorm,
			8 * 1,   // kGfxFormat_R8_Sint,
			8 * 1,   // kGfxFormat_A8_Unorm,
			1,       // kGfxFormat_R1_Unorm,
			8 * 4,   // kGfxFormat_R9G9B9E5_SHAREDEXP,
			8 * 4,   // kGfxFormat_R8G8_B8G8_Unorm,
			8 * 4,   // kGfxFormat_G8R8_G8B8_Unorm,
			8 / 2,   // kGfxFormat_BC1_Typeless,
			8 / 2,   // kGfxFormat_BC1_Unorm,
			8 / 2,   // kGfxFormat_BC1_Unorm_SRGB,
			8 * 1,   // kGfxFormat_BC2_Typeless,
			8 * 1,   // kGfxFormat_BC2_Unorm,
			8 * 1,   // kGfxFormat_BC2_Unorm_SRGB,
			8 * 1,   // kGfxFormat_BC3_Typeless,
			8 * 1,   // kGfxFormat_BC3_Unorm,
			8 * 1,   // kGfxFormat_BC3_Unorm_SRGB,
			8 / 2,   // kGfxFormat_BC4_Typeless,
			8 / 2,   // kGfxFormat_BC4_Unorm,
			8 / 2,   // kGfxFormat_BC4_Snorm,
			8 * 1,   // kGfxFormat_BC5_Typeless,
			8 * 1,   // kGfxFormat_BC5_Unorm,
			8 * 1,   // kGfxFormat_BC5_Snorm,
			8 * 2,   // kGfxFormat_B5G6R5_Unorm,
			8 * 2,   // kGfxFormat_B5G5R5A1_Unorm,
			8 * 4,   // kGfxFormat_B8G8R8A8_Unorm,
			8 * 4,   // kGfxFormat_B8G8R8X8_Unorm,
			8 * 4,   // kGfxFormat_R10G10B10_XR_BIAS_A2_Unorm,
			8 * 4,   // kGfxFormat_B8G8R8A8_Typeless,
			8 * 4,   // kGfxFormat_B8G8R8A8_Unorm_SRGB,
			8 * 4,   // kGfxFormat_B8G8R8X8_Typeless,
			8 * 4,   // kGfxFormat_B8G8R8X8_Unorm_SRGB,
			8 * 1,   // kGfxFormat_BC6H_Typeless,
			8 * 1,   // kGfxFormat_BC6H_UF16,
			8 * 1,   // kGfxFormat_BC6H_SF16,
			8 * 1,   // kGfxFormat_BC7_Typeless,
			8 * 1,   // kGfxFormat_BC7_Unorm,
			8 * 1,   // kGfxFormat_BC7_Unorm_SRGB,		//kGfxFormat_AYUV,
			//kGfxF  ormat_Y410,
			//kGfxFormat_Y416,
			//kGfxFormat_NV12,
			//kGfxFormat_P010,
			//kGfxFormat_P016,
			//kGfxFormat_420_OPAQUE,
			//kGfxFormat_YUY2,
			//kGfxFormat_Y210,
			//kGfxFormat_Y216,
			//kGfxFormat_NV11,
			//kGfxFormat_AI44,
			//kGfxFormat_IA44,
			//kGfxFormat_P8,
			//kGfxFormat_A8P8,
			//kGfxFormat_B4G4R4A4_Unorm,
			//kGfxFormat_P208,
			//kGfxFormat_V208,
			//kGfxFormat_V408,
		};
		static_assert(SI::ArraySize(kTable) == (size_t)kGfxFormat_Max, "tableError");

		return kTable[format];
	}

} // namespace SI
