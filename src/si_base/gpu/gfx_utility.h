#pragma once

#include "si_base/core/core.h"
#include "si_base/gpu/gfx_enum.h"

namespace SI
{
	inline size_t GetFormatBits(GfxFormat format)
	{
		size_t kTable[] =
		{
			0,       // GfxFormat::kUnknown,
			8 * 16,  // GfxFormat::kR32G32B32A32_Typeless,
			8 * 16,  // GfxFormat::kR32G32B32A32_Float,
			8 * 16,  // GfxFormat::kR32G32B32A32_Uint,
			8 * 16,  // GfxFormat::kR32G32B32A32_Sint,
			8 * 12,  // GfxFormat::kR32G32B32_Typeless,
			8 * 12,  // GfxFormat::kR32G32B32_Float,
			8 * 12,  // GfxFormat::kR32G32B32_Uint,
			8 * 12,  // GfxFormat::kR32G32B32_Sint,
			8 * 8,   // GfxFormat::kR16G16B16A16_Typeless,
			8 * 8,   // GfxFormat::kR16G16B16A16_Float,
			8 * 8,   // GfxFormat::kR16G16B16A16_Unorm,
			8 * 8,   // GfxFormat::kR16G16B16A16_Uint,
			8 * 8,   // GfxFormat::kR16G16B16A16_Snorm,
			8 * 8,   // GfxFormat::kR16G16B16A16_Sint,
			8 * 8,   // GfxFormat::kR32G32_Typeless,
			8 * 8,   // GfxFormat::kR32G32_Float,
			8 * 8,   // GfxFormat::kR32G32_Uint,
			8 * 8,   // GfxFormat::kR32G32_Sint,
			8 * 8,   // GfxFormat::kR32G8X24_Typeless,
			8 * 8,   // GfxFormat::kD32_Float_S8X24_Uint,
			8 * 8,   // GfxFormat::kR32_Float_X8X24_Typeless,
			8 * 8,   // GfxFormat::kX32_Typeless_G8X24_Uint,
			8 * 4,   // GfxFormat::kR10G10B10A2_Typeless,
			8 * 4,   // GfxFormat::kR10G10B10A2_Unorm,
			8 * 4,   // GfxFormat::kR10G10B10A2_Uint,
			8 * 4,   // GfxFormat::kR11G11B10_Float,
			8 * 4,   // GfxFormat::kR8G8B8A8_Typeless,
			8 * 4,   // GfxFormat::kR8G8B8A8_Unorm,
			8 * 4,   // GfxFormat::kR8G8B8A8_Unorm_SRGB,
			8 * 4,   // GfxFormat::kR8G8B8A8_Uint,
			8 * 4,   // GfxFormat::kR8G8B8A8_Snorm,
			8 * 4,   // GfxFormat::kR8G8B8A8_Sint,
			8 * 4,   // GfxFormat::kR16G16_Typeless,
			8 * 4,   // GfxFormat::kR16G16_Float,
			8 * 4,   // GfxFormat::kR16G16_Unorm,
			8 * 4,   // GfxFormat::kR16G16_Uint,
			8 * 4,   // GfxFormat::kR16G16_Snorm,
			8 * 4,   // GfxFormat::kR16G16_Sint,
			8 * 4,   // GfxFormat::kR32_Typeless,
			8 * 4,   // GfxFormat::kD32_Float,
			8 * 4,   // GfxFormat::kR32_Float,
			8 * 4,   // GfxFormat::kR32_Uint,
			8 * 4,   // GfxFormat::kR32_Sint,
			8 * 4,   // GfxFormat::kR24G8_Typeless,
			8 * 4,   // GfxFormat::kD24_Unorm_S8_Uint,
			8 * 4,   // GfxFormat::kR24_Unorm_X8_Typeless,
			8 * 4,   // GfxFormat::kX24_Typeless_G8_Uint,
			8 * 2,   // GfxFormat::kR8G8_Typeless,
			8 * 2,   // GfxFormat::kR8G8_Unorm,
			8 * 2,   // GfxFormat::kR8G8_Uint,
			8 * 2,   // GfxFormat::kR8G8_Snorm,
			8 * 2,   // GfxFormat::kR8G8_Sint,
			8 * 2,   // GfxFormat::kR16_Typeless,
			8 * 2,   // GfxFormat::kR16_Float,
			8 * 2,   // GfxFormat::kD16_Unorm,
			8 * 2,   // GfxFormat::kR16_Unorm,
			8 * 2,   // GfxFormat::kR16_Uint,
			8 * 2,   // GfxFormat::kR16_Snorm,
			8 * 2,   // GfxFormat::kR16_Sint,
			8 * 1,   // GfxFormat::kR8_Typeless,
			8 * 1,   // GfxFormat::kR8_Unorm,
			8 * 1,   // GfxFormat::kR8_Uint,
			8 * 1,   // GfxFormat::kR8_Snorm,
			8 * 1,   // GfxFormat::kR8_Sint,
			8 * 1,   // GfxFormat::kA8_Unorm,
			1,       // GfxFormat::kR1_Unorm,
			8 * 4,   // GfxFormat::kR9G9B9E5_SHAREDEXP,
			8 * 4,   // GfxFormat::kR8G8_B8G8_Unorm,
			8 * 4,   // GfxFormat::kG8R8_G8B8_Unorm,
			8 / 2,   // GfxFormat::kBC1_Typeless,
			8 / 2,   // GfxFormat::kBC1_Unorm,
			8 / 2,   // GfxFormat::kBC1_Unorm_SRGB,
			8 * 1,   // GfxFormat::kBC2_Typeless,
			8 * 1,   // GfxFormat::kBC2_Unorm,
			8 * 1,   // GfxFormat::kBC2_Unorm_SRGB,
			8 * 1,   // GfxFormat::kBC3_Typeless,
			8 * 1,   // GfxFormat::kBC3_Unorm,
			8 * 1,   // GfxFormat::kBC3_Unorm_SRGB,
			8 / 2,   // GfxFormat::kBC4_Typeless,
			8 / 2,   // GfxFormat::kBC4_Unorm,
			8 / 2,   // GfxFormat::kBC4_Snorm,
			8 * 1,   // GfxFormat::kBC5_Typeless,
			8 * 1,   // GfxFormat::kBC5_Unorm,
			8 * 1,   // GfxFormat::kBC5_Snorm,
			8 * 2,   // GfxFormat::kB5G6R5_Unorm,
			8 * 2,   // GfxFormat::kB5G5R5A1_Unorm,
			8 * 4,   // GfxFormat::kB8G8R8A8_Unorm,
			8 * 4,   // GfxFormat::kB8G8R8X8_Unorm,
			8 * 4,   // GfxFormat::kR10G10B10_XR_BIAS_A2_Unorm,
			8 * 4,   // GfxFormat::kB8G8R8A8_Typeless,
			8 * 4,   // GfxFormat::kB8G8R8A8_Unorm_SRGB,
			8 * 4,   // GfxFormat::kB8G8R8X8_Typeless,
			8 * 4,   // GfxFormat::kB8G8R8X8_Unorm_SRGB,
			8 * 1,   // GfxFormat::kBC6H_Typeless,
			8 * 1,   // GfxFormat::kBC6H_UF16,
			8 * 1,   // GfxFormat::kBC6H_SF16,
			8 * 1,   // GfxFormat::kBC7_Typeless,
			8 * 1,   // GfxFormat::kBC7_Unorm,
			8 * 1,   // GfxFormat::kBC7_Unorm_SRGB,		//GfxFormat::kAYUV,
			//kGfxF  ormat_Y410,
			//GfxFormat::kY416,
			//GfxFormat::kNV12,
			//GfxFormat::kP010,
			//GfxFormat::kP016,
			//GfxFormat::k420_OPAQUE,
			//GfxFormat::kYUY2,
			//GfxFormat::kY210,
			//GfxFormat::kY216,
			//GfxFormat::kNV11,
			//GfxFormat::kAI44,
			//GfxFormat::kIA44,
			//GfxFormat::kP8,
			//GfxFormat::kA8P8,
			//GfxFormat::kB4G4R4A4_Unorm,
			//GfxFormat::kP208,
			//GfxFormat::kV208,
			//GfxFormat::kV408,
		};
		static_assert(SI::ArraySize(kTable) == (size_t)GfxFormat::kMax, "tableError");

		return kTable[format];
	}

} // namespace SI
